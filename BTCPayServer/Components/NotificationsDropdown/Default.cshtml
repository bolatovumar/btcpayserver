@inject LinkGenerator linkGenerator
@inject UserManager<ApplicationUser> UserManager
@inject CssThemeManager CssThemeManager
@using BTCPayServer.HostedServices
@using Microsoft.AspNetCore.Http.Extensions
@model BTCPayServer.Components.NotificationsDropdown.NotificationSummaryViewModel

@if (Model.UnseenCount > 0)
{
    <li class="nav-item dropdown" id="notifications-nav-item">
        <a class="nav-link js-scroll-trigger" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" id="Notifications" style="border-bottom: 0;">
            <i class="fa fa-bell"></i>
        </a>
        <span class="alerts-badge badge badge-pill badge-danger">@Model.UnseenCount</span>
        <div class="dropdown-menu dropdown-menu-right text-center notification-dropdown" aria-labelledby="navbarDropdown">
            <div class="d-flex align-items-center justify-content-between py-3 px-4 border-bottom border-light"> 
                <div role="heading" aria-level="3" class="font-weight-semibold" style="font-size: 20px;">Notifications</div>
                <form asp-controller="Notifications" asp-action="MarkAllAsSeen" asp-route-returnUrl="@Context.Request.GetCurrentPathWithQueryString()" method="post">
                    <button class="btn btn-link p-0 font-weight-semibold" type="submit">Mark all as seen</button>
                </form>
            </div>
            @foreach (var notif in Model.Last5)
            {
                <a asp-action="NotificationPassThrough" asp-controller="Notifications" asp-route-id="@notif.Id" class="notification d-flex align-items-center dropdown-item border-bottom border-light py-3 px-4">
                    <div class="mr-3">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M14.2 16H1.8C0.808 16 0 15.192 0 14.2V1.8C0 0.808 0.808 0 1.8 0H14.2C15.192 0 16 0.808 16 1.8V14.2C16 15.192 15.192 16 14.2 16ZM1.8 1.2C1.4688 1.2 1.2 1.4696 1.2 1.8V14.2C1.2 14.5304 1.4688 14.8 1.8 14.8H14.2C14.5312 14.8 14.8 14.5304 14.8 14.2V1.8C14.8 1.4696 14.5312 1.2 14.2 1.2H1.8Z" fill="#8D8D8F"/>
                            <path d="M12.0004 5.31182H4.00039C3.66919 5.31182 3.40039 5.04222 3.40039 4.71182C3.40039 4.38142 3.66919 4.11182 4.00039 4.11182H12.0004C12.3316 4.11182 12.6004 4.37982 12.6004 4.71182C12.6004 5.04382 12.3316 5.31182 12.0004 5.31182ZM12.0004 8.59982H4.00039C3.66919 8.59982 3.40039 8.33102 3.40039 7.99982C3.40039 7.66862 3.66919 7.39982 4.00039 7.39982H12.0004C12.3316 7.39982 12.6004 7.66862 12.6004 7.99982C12.6004 8.33102 12.3316 8.59982 12.0004 8.59982ZM8.00039 11.8878H4.00039C3.66919 11.8878 3.40039 11.6198 3.40039 11.2878C3.40039 10.9558 3.66919 10.6878 4.00039 10.6878H8.00039C8.33159 10.6878 8.60039 10.9574 8.60039 11.2878C8.60039 11.6182 8.33159 11.8878 8.00039 11.8878Z" fill="#8D8D8F"/>
                        </svg>
                    </div>

                    <div class="notification-item__content">
                        <div class="text-left font-weight-semibold">
                            @notif.Body
                        </div>
                        <div class="text-left d-flex">
                            <small class="text-muted" data-timeago-unixms="@notif.Created.ToUnixTimeMilliseconds()">@notif.Created.ToTimeAgo()</small>
                        </div>
                    </div>
                </a>
            }
            <div class="p-3"> 
                <a class="font-weight-semibold" asp-controller="Notifications" asp-action="Index">View all</a>
            </div>
        </div>
    </li>
}
else
{
    <li class="nav-item" id="notifications-nav-item">
        <a asp-controller="Notifications" asp-action="Index" title="Notifications" class="nav-link js-scroll-trigger" id="Notifications">
            <i class="fa fa-bell"></i>
        </a>
    </li>
}
@{
    var disabled = CssThemeManager.Policies.DisableInstantNotifications;
    if (!disabled)
    {
        var user = await UserManager.GetUserAsync(User);
        disabled = user.DisabledNotifications == "all";
    }
}
@if (!disabled)
{

    <script type="text/javascript">

    var supportsWebSockets = 'WebSocket' in window && window.WebSocket.CLOSING === 2;

    if (supportsWebSockets) {

        var loc = window.location, ws_uri;
        if (loc.protocol === "https:") {
            ws_uri = "wss:";
        } else {
            ws_uri = "ws:";
        }
        ws_uri += "//" + loc.host;
        ws_uri += "@linkGenerator.GetPathByAction("SubscribeUpdates", "Notifications")";
        var newDataEndpoint = "@linkGenerator.GetPathByAction("GetNotificationDropdownUI", "Notifications")";
    
        try {
            socket = new WebSocket(ws_uri);
            socket.onmessage = function (e) {
                $.get(newDataEndpoint, function(data){
                    $("#notifications-nav-item").replaceWith($(data));
               });
            };
            socket.onerror = function (e) {
                console.error("Error while connecting to websocket for notifications (callback)", e);
            };
        }
        catch (e) {
            console.error("Error while connecting to websocket for notifications", e);
        }
    }
    </script>
}
